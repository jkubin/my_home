# 2015/07/12 Josef Kubin
#
# $HeadURL: https://bx.cz/vyvoj/inmatutils/make/c18_mla.make $
# $LastChangedDate: 2017-11-04 07:36:23 +0100 (Sat, 04 Nov 2017) $
# $LastChangedBy: josef $
# $Revision: 174 $
# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <opentracer_gmail...> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.         Josef Kubin
# ----------------------------------------------------------------------------
#
# Makefile for Microchip Libraries for Applications (MLA)
#

AS  = MPASMWIN.exe
CC  = mcc18.exe
LD  = mplink.exe
MACROS_GCC = -D__18CXX -D__$(MCU)
MACROS   = -D__DEBUG
LDMACROS = -u_CRUNTIME -u_DEBUG
ASFLAGS  = -q -y
LDFLAGS  = -w -x
PROJECT  = $(notdir $(PWD))
OBJS     = $(patsubst %.c, %.o, $(notdir $(CSRC)))
INCLUDE  = -I ../../../Microchip/Include
INCLGCC  = -I ~/.wine/drive_c/MCC18/h
INCSTDH  = -I /MCC18/h
# gcc command switch "-C" preserves comments but "indent" has a problem because of source code mess
PREPROC_FLAGS = -dD -P -E -nostdinc -undef
PREPROC_DIR   = preproc
PREPROC_CSRC  = $(addprefix $(PREPROC_DIR)/, $(notdir $(CSRC)))
STUB_NAME     = pic18_stub
TRACER_DIR    = ~/utils/opentracer

# remove implicit suffix rules
# .SUFFIXES:

# include applic.make with a specific project settings and source files
include applic.make

#:ap/applic	only build an application
.PHONY: applic ap
applic ap: $(PROJECT).cof 

#:pp/prep	only run the subordinate Makefile in the preproc dir
.PHONY: prep pp
prep pp: $(PREPROC_DIR)/$(PROJECT).cof


#:all	build all; Dangerous for your manually edited files! You have been warned!
.PHONY: all
all: applic $(PREPROC_DIR) $(PREPROC_CSRC) prep


$(PROJECT).cof: $(LKR) $(OBJS)
	$(LD) -p$(MCU) $(LDFLAGS) $(LDMACROS) $^ -o$@ -m$(PROJECT).map >&2-
	@# generates tags file from C and dependency files
	@ctags --extra=+f $(CSRC) $(shell sed -n '/:$$/{s///;p}' *.d | sort -u)

$(PREPROC_DIR):
	mkdir $@
	echo "$$SUBORDINATE_MAKEFILE" > $@/Makefile
	ln -s $(TRACER_DIR)/$(STUB_NAME)/$(STUB_NAME).c $@/
	ln -s $(TRACER_DIR)/$(STUB_NAME)/$(STUB_NAME).h $@/
	ln -s $(TRACER_DIR)/opentracer.h $@/
	ln -s $(TRACER_DIR)/trace_id.m4 $@/
ifdef LKR
	ln -s ../$(LKR) $@/
endif

$(PREPROC_DIR)/$(PROJECT).cof:
	$(MAKE) -C $(PREPROC_DIR) all

-include $(OBJS:.o=.d)

# adds a dependency to Makefile and applic.make (if Makefile or applic.make changes, rebuild all object files)
$(OBJS): Makefile applic.make

%.o: ../../../Microchip/USB/%.c
	$(applic_command_set)

$(PREPROC_DIR)/%.c: ../../../Microchip/USB/%.c
	$(preproc_command_set)

%.o: ../../../Microchip/USB/HID_Device_Driver/%.c
	$(applic_command_set)

$(PREPROC_DIR)/%.c: ../../../Microchip/USB/HID_Device_Driver/%.c
	$(preproc_command_set)

%.o: ../../../Microchip/MDD_File_System/%.c
	$(applic_command_set)

$(PREPROC_DIR)/%.c: ../../../Microchip/MDD_File_System/%.c
	$(preproc_command_set)

%.o: ../../../Microchip/PIC18_salloc/%.c
	$(applic_command_set)

$(PREPROC_DIR)/%.c: ../../../Microchip/PIC18_salloc/%.c
	$(preproc_command_set)

%.o: ../../../Microchip/USB/MSD_Device_Driver/%.c
	$(applic_command_set)

$(PREPROC_DIR)/%.c: ../../../Microchip/USB/MSD_Device_Driver/%.c
	$(preproc_command_set)

%.o: ../../../Microchip/USB/CDC_Device_Driver/%.c
	$(applic_command_set)

$(PREPROC_DIR)/%.c: ../../../Microchip/USB/CDC_Device_Driver/%.c
	$(preproc_command_set)

%.o: ../../Microchip/TCPIP_Stack/%.c
	$(applic_command_set)

$(PREPROC_DIR)/%.c: ../../Microchip/TCPIP_Stack/%.c
	$(preproc_command_set)

%.o: %.c
	$(applic_command_set)

$(PREPROC_DIR)/%.c: %.c
	$(preproc_command_set)


# start of application command set (some are executed silently)
define applic_command_set

@# mcc18.exe is a compiler for Windows and this ">&2-" descriptor magic is important
$(CC) -p$(MCU) $(CFLAGS) -I. $(INCSTDH) $(INCLUDE) $(MACROS) -fo=$@ $< >&2-

@# gcc generates dependencies from a source file in order to include them into Makefile later
@gcc -I. $(INCLUDE) $(MACROS) $(MACROS_GCC) -MM -MP -MF $*.d $<

endef
# end of application command set


# start of preproc command set (some are executed silently)
define preproc_command_set

@# gcc is configured as a preprocessor (expands macros, deletes long nasty comments)
gcc $(PREPROC_FLAGS) -I. $(INCLUDE) $(INCLGCC) $(MACROS) $(MACROS_GCC) -o $@ $<

@# inserts the stub header file at the beginning of the source file
@sed -i '1s/^/\#include "$(STUB_NAME).h"\n/' $@

@# delete lines with conflicting macros generated by gcc
@sed -i '/__STDC__\|__DEBUG\|__EXTENDED18__\|__18[CF]/d' $@

@# reindent the source code again, due to preprocessor
@my_indent_style $@

endef
# end of preproc command set


#:cl/clean	removes generated files in current directory
.PHONY: clean cl
clean cl:
	$(RM) tags *.{d,i,o,cof,map,hex,mcs,mcw}


#:rm/remove	 /!\ clean generated files, removes preproc directory with (valuable) files
.PHONY: remove rm
remove rm: clean
	$(RM) -r $(PREPROC_DIR)

# how to print color text on a terminal
# $ man 4 console_codes
# $ echo -e '\e[1;40;38;5;82mColored!\e[m'
# $ echo -e '\x1b[1;40;38;5;82mColored!\x1b[m'		<--- use for sed
#:h/help	prints this text
.PHONY: help h
help h:
	@sed -n '/^#:/{s//\x1b[1;40;38;5;82mmk /;s/\t/\x1b[m /;p}' Makefile | sort


################################################################################
# exports subordinate Makefile to $(PREPROC_DIR)
export SUBORDINATE_MAKEFILE

# start of subordinate Makefile
define SUBORDINATE_MAKEFILE
# Generated automatically $(shell date '+%Y%m%d-%T')
# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <opentracer_gmail...> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.         Josef Kubin
# ----------------------------------------------------------------------------

MCU      = $(MCU)
LKR      = $(notdir $(LKR))
CC       = $(CC)
AS       = $(AS)
LD       = $(LD)
CFLAGS   = $(CFLAGS)
ASFLAGS  = $(ASFLAGS)
LDFLAGS  = $(LDFLAGS)
LDMACROS = $(LDMACROS)
PROJECT  = $(PREPROC_DIR)
INCSTDH  = $(INCSTDH)
MACROS   = -DTRACE_POINT_WIDTH=$$(TRACE_POINT_WIDTH) 
MACROS  += -DTRACE_TIMER_WIDTH=$$(TRACE_TIMER_WIDTH) 

# uncomment the following, if you want trivial tracing (only plain tracepoints)
MACROS += -DTRACE_TRIVIAL
TRACE_POINT_WIDTH = 1
TRACE_TIMER_WIDTH = 0
TRACE_POINT_FILE = counter.txt

OBJS = \
       $$(patsubst %.c, %.o, $$(wildcard *.c)) \
       $$(patsubst %.asm, %.o, $$(wildcard *.asm)) \

.SUFFIXES:

$$(PROJECT).cof: $$(LKR) $$(OBJS)
	$$(LD) -p$$(MCU) $$(LDFLAGS) $$(LDMACROS) $$^ -o$$@ -m$$(PROJECT).map >&2-
	@ctags *.[ch] --langdef=trace --regex-trace='/\<tracepoint\((0b[01]+)\)/\1/d,tracepoint definition/' --language-force=trace -n *.c

##:all	build all
.PHONY: all
all: pnt $$(PROJECT).cof

%.o: %.c Makefile
	$$(CC) -p$$(MCU) $$(CFLAGS) $$(INCSTDH) $$(MACROS) -fo=$$@ $$< >&2-
	@gcc $$(MACROS) -MM -MP -MF $$*.d $$<

%.o: %.asm
	-$$(AS) -p$$(MCU) $$(ASFLAGS) $$(MACROS) -l$$*.lst -e$$*.err -o$$@ $$< >&2-
	@if [ -s $$*.err ]; then $$(RM) $$@; cat $$*.err >&2; false; fi

-include $$(OBJS:.o=.d)

##:pnt	create or refresh tracepoint(ID)
.PHONY: pnt
pnt: $$(patsubst %.c, %.pnt, $$(shell grep -l '\<tracepoint(\(0b[01]\+\)\?)' *.c))
	@$$(RM) $$(TRACE_POINT_FILE)

%.pnt: %.c
	@cp $$< $$@
	m4 $$(MACROS) -DTRACE_POINT_FILE=$$(TRACE_POINT_FILE) -DTRACE_FILE=$$< trace_id.m4 $$@ > $$<
	@$$(RM) $$@

##:cl/clean	removes generated files
.PHONY: clean cl
clean cl:
	$$(RM) tags *.{d,o,i,err,lst,map,cof,pnt}

##:h/help	prints this text
.PHONY: help h
help h:
	@sed -n '/^##:/{s//\x1b[1;40;38;5;82mmk /;s/\t/\x1b[m /;p}' Makefile | sort

endef
# end of subordinate Makefile
################################################################################

